export interface ProjectData {
    id: string;
    title: string;
    description: string;
    githubLink: string;
    fullDescription: string;
    technologies: string[];
    screenshots: string[];
}

export const projectsData: ProjectData[] = [
    {
        id: 'danmcode-portfolio',
        title: 'Portafolio danmcode - [Proyecto Personal] - 2025',
        description: 'Desarroll√© un sitio web moderno y responsivo para presentar mi portafolio profesional.',
        githubLink: 'https://github.com/danmcode/portfolio',
        fullDescription: `Este proyecto representa la primera versi√≥n de mi portafolio profesional, dise√±ado y desarrollado desde cero 
        con un enfoque en escalabilidad, mantenibilidad y experiencia de usuario.
        
üéØ El objetivo principal fue crear una plataforma clara y funcional para mostrar qui√©n soy como desarrollador, 
mis habilidades t√©cnicas, experiencia y proyectos destacados.

‚úÖ Entre las caracter√≠sticas clave del desarrollo se incluyen:

- Arquitectura modular basada en el patr√≥n Atomic Design,
- Componentes reutilizables para facilitar el mantenimiento y escalado,
- Estilos limpios y eficientes con Tailwind CSS,
- Buenas pr√°cticas de accesibilidad (a11y) para usuarios con tecnolog√≠as de asistencia,
- Navegaci√≥n fluida utilizando React Router,
- C√≥digo robusto y bien tipado con TypeScript,
- Integraci√≥n continua con GitHub Actions para despliegues autom√°ticos.

Este portafolio no solo muestra mi trabajo, sino tambi√©n mi enfoque profesional 
al construir aplicaciones modernas con tecnolog√≠as actuales.`,
        technologies: [
            'HTML',
            'CSS',
            'Tailwind CSS',
            'TypeScript',
            'React',
            'React Router',
            'Git',
            'GitHub Actions'
        ],
        screenshots: [],
    },
    {
        id: 'pisa-access-control',
        title: 'Control de acceso ‚Äì [Prot√©cnica Ingenier√≠a] - 2023',
        description: 'Modernic√© y mejor√© el sistema de control de accesos de Prot√©cnica Ingenier√≠a, automatizando procesos clave como el ingreso con QR y la validaci√≥n de visitantes.',
        githubLink: '[Clasificado]',
        fullDescription:
            `Este fue el √∫ltimo sistema que desarroll√© completamente en PHP y Laravel, 
            donde estuve a cargo de todo el ciclo de vida del producto: desde el levantamiento de requerimientos 
            hasta el despliegue en producci√≥n.  

üéØ El objetivo era claro: 
Automatizar el control de accesos, hacer la vida m√°s f√°cil tanto para los colaboradores 
como para el personal de seguridad, y eliminar la dependencia de registros manuales 
(Aunque a√∫n el programa tiene esa funcionalidad).  

‚úÖ Principales funcionalidades:
- Registro y gesti√≥n de colaboradores.
- Ingreso y salida mediante escaneo de c√≥digos QR.
- Registro y control de visitantes (incluyendo a qui√©n visitan).
- Validaci√≥n de afiliaci√≥n activa a ARL para visitantes y contratistas.
- Exportaci√≥n de reportes en Excel con filtros personalizados.

‚ùó Adem√°s de implementar nuevas funcionalidades, tambi√©n mejoramos el rendimiento general del sistema:
- Refactorizamos el backend usando Eloquent y buenas pr√°cticas de dise√±o.
- Optimizamos las relaciones entre tablas para mejorar los tiempos de consulta.
- Migramos el flujo de registro de ingresos a un sistema autogestionado v√≠a QR.

Este proyecto le dio un nuevo aire a un sistema heredado que antes depend√≠a 100% del registro manual 
por parte de los guardas de seguridad.`,
        technologies: [
            'PHP 8',
            'Laravel',
            'Blade',
            'Bootstrap',
            'JavaScript',
            'Livewire',
            'MySQL',
            'Apache',
            'Linux',
            'ApiRest'
        ],
        screenshots: []
    },
    {
        id: 'pisa-access-control-mobile',
        title: 'Control de acceso App M√≥vil ‚Äì [Prot√©cnica Ingenier√≠a] - 2024',
        description: 'Desarroll√© una app m√≥vil en Flutter que permite registrar ingresos y salidas de colaboradores mediante escaneo de c√≥digos QR.',
        githubLink: '[Clasificado]',
        fullDescription: `Como complemento al sistema web de control de accesos, desarroll√© 
        desde cero la aplicaci√≥n m√≥vil y su respectiva API REST en Laravel. 
        El objetivo: permitir que los colaboradores puedan registrar su ingreso y salida escaneando un c√≥digo QR 
        directamente desde un celular o tablet, 
        especialmente √∫til para quienes ingresan en veh√≠culos y no pueden usar el lector f√≠sico de la porter√≠a.

üì≤ ¬øQu√© hace esta app?
Con ayuda de librer√≠as externas, la app utiliza la c√°mara del dispositivo m√≥vil 
para leer los QR generados por la plataforma, registrar autom√°ticamente la entrada o salida 
y sincronizarlo con el backend.

üéØ Objetivo clave:
Evitar congestiones y mejorar la experiencia del ingreso vehicular,
 eliminando la necesidad de bajarse del veh√≠culo o depender de un guarda.

‚úÖ Principales funcionalidades:
- Registro de ingreso/salida mediante escaneo de QR.
- Integraci√≥n en tiempo real con la plataforma central.
- Manejo de sesiones y respuestas optimizadas v√≠a API REST.

üí° Adem√°s, este proyecto marc√≥ el inicio de mi pr√°ctica consciente de buenas pr√°cticas de arquitectura:
- Apliqu√© conceptos de Clean Code y los principios SOLID.
- Comenc√© a estructurar el c√≥digo en capas bien definidas, facilitando mantenibilidad y escalabilidad.`,
        technologies: [
            'PHP 8',
            'Laravel',
            'Flutter',
            'Dart'
        ],
        screenshots: []
    },
    {
        id: 'pisa-commision-calculations',
        title: 'C√°lculo de comisiones ‚Äì [Prot√©cnica Ingenier√≠a] ‚Äì 2024-2025',
        description: 'Automatizaci√≥n del c√°lculo de comisiones de vendedores conectando el ERP a una app Node.js + React con reportes en Excel.',
        githubLink: '[Clasificado]',
        fullDescription: `
        Desarroll√© una soluci√≥n desde cero que automatiza el proceso de c√°lculo de comisiones 
        para los equipos de ventas nacionales e internacionales, extrayendo y procesando 
        la data directamente desde el ERP corporativo.

üß† ¬øC√≥mo lo hice?
Constru√≠ un backend en Node.js + TypeScript que se conecta en modo lectura a la base de datos SQL Server del ERP.
 Apliqu√© un proceso tipo ETL (Extracci√≥n, Transformaci√≥n y Carga) para analizar 
 movimientos de ventas, inventario y recaudos, y generar c√°lculos precisos y personalizados para cada vendedor.

Inicialmente, el resultado se pensaba mostrar en Power BI, pero debido a requisitos espec√≠ficos de formato y velocidad,
construimos una app en React + MUI donde el equipo puede generar y descargar los reportes de Excel con un solo clic.

üéØ Objetivo:
Reducir de forma dr√°stica el tiempo y el esfuerzo necesarios para calcular comisiones. 
Pasamos de 5 horas manuales en Excel... ¬°a solo 3 a 5 minutos!

‚úÖ Principales funcionalidades:
- C√°lculo autom√°tico de comisiones seg√∫n m√∫ltiples condiciones como:
  - Ciudad de venta
  - Valor de fletes
  - Tipo de producto y lista de precios
  - Porcentaje asignado
  - Tiempo de recaudo
  - (‚Ä¶y muchas, muchas condiciones m√°s‚Ä¶ esto parec√≠a m√°s un sudoku empresarial üòÇ)
- Descarga directa de reportes en Excel con el formato requerido por contabilidad.
- Interfaz web ligera y pr√°ctica, hecha con React y MUI.
- Backend desacoplado con arquitectura modular y enfoque en rendimiento.

üí° Extras t√©cnicos:
- Arquitectura DDD (Domain-Driven Design).
- Aplicaci√≥n de principios SOLID y Clean Code.
- Contenerizaci√≥n con Docker para facilitar despliegues en producci√≥n.`,
        technologies: [
            'NodeJS',
            'Docker',
            'React',
            'TypeScript',
            'MUI'
        ],
        screenshots: []
    },
    {
        id: 'pisa-intranet',
        title: 'Intranet ‚Äì [Prot√©cnica Ingenier√≠a] - 2025',
        description: 'Redise√±√© completamente la intranet de la compa√±√≠a, migr√°ndola desde tecnolog√≠as obsoletas hacia una soluci√≥n moderna con React, Node.js y Docker.',
        githubLink: '[Clasificado]',
        fullDescription: `Desarroll√© desde cero la nueva intranet corporativa de Prot√©cnica Ingenier√≠a, 
        reemplazando una versi√≥n antigua construida con PHP 5, jQuery y CentOS 5, 
        que era fr√°gil, dif√≠cil de mantener y peligrosa ante cualquier cambio.

La nueva versi√≥n fue desarrollada con un stack moderno: React + MUI en el frontend y 
Node.js + Express + TypeScript en el backend, empaquetada con Docker para facilitar su despliegue. 
Particip√© en todas las fases del proyecto: levantamiento de requerimientos, desarrollo, pruebas, 
puesta en producci√≥n y colaboraci√≥n con el √°rea de marketing para su lanzamiento interno.

üéØ Objetivo:
Actualizar y robustecer la intranet como punto central de acceso a los sistemas internos, 
mejorando la experiencia de los usuarios y facilitando la administraci√≥n de procesos internos.

‚úÖ Principales funcionalidades:
- Portal centralizado: Enlace hacia todos los sistemas internos de la compa√±√≠a.
- Directorio de colaboradores: Visualizaci√≥n por √°rea, extensi√≥n y contacto.
- M√≥dulo de almuerzos: Solicitud de alimentos con c√°lculo autom√°tico del descuento entre empresa y colaborador,
    generaci√≥n de reportes planos para n√≥mina.
- Solicitud de permisos laborales: Flujo de aprobaci√≥n automatizado.
- Reserva de salas: Calendario con disponibilidad y confirmaci√≥n v√≠a correo.
- Configuraciones personalizadas: Que antes requer√≠an edici√≥n manual en el c√≥digo.
- Blog corporativo: Para publicar anuncios y novedades de la empresa.

üí° Extras t√©cnicos:
- Aplicaci√≥n de principios SOLID y patrones de dise√±o para facilitar la escalabilidad.
- Uso de Docker para despliegue y versionado eficiente.
- Modularizaci√≥n del c√≥digo por dominios, facilitando el mantenimiento.
- Integraci√≥n con sistemas existentes (n√≥mina, reservas, etc.).

‚ù§Ô∏è Es un proyecto al que le he tomado mucho cari√±o. A la fecha de hoy (30 de julio de 2025), 
estamos trabajando con el √°rea de marketing para preparar la campa√±a de expectativa y su lanzamiento oficial.`,
        technologies: [
            'React',
            'MUI',
            'Node.js',
            'Express',
            'TypeScript',
            'Docker',
            'Zod',
            'Sequelize',
            'MySql'
        ],
        screenshots: []
    },
    {
        id: 'danmcode-finance',
        title: 'Finanzas Personales ‚Äì [Proyecto Personal] - 2025',
        description: 'Aplicativo Web y M√≥vil para gestionar finanzas personales de forma r√°pida, visual y personalizada.',
        githubLink: 'https://github.com/danmcode/danmcode-finance',
        fullDescription: `
Como intento ser juicioso con mis finanzas, empec√© usando una plantilla de Excel 
que poco a poco fui adaptando con f√≥rmulas, c√°lculos y hojas din√°micas. 
Pero seamos honestos... el Excel ya no daba para m√°s üòÖ

As√≠ naci√≥ este proyecto personal: convertir esa l√≥gica en una app web moderna y eficiente, 
que me permita planificar, registrar y visualizar mis finanzas desde cualquier dispositivo.

üéØ ¬øObjetivo?
Crear una soluci√≥n real para mis finanzas personales, mientras practico y mejoro mis habilidades como desarrollador 
Full Stack.

üõ†Ô∏è Tecnolog√≠as:
TypeScript, Node.js, Express, PostgreSQL, React y Tailwind CSS (s√≠, esta vez dej√© MUI para meterle amor a Tailwind).

‚úÖ Funcionalidades principales:
- M√≥dulo de planeaci√≥n mensual y seguimiento real.
- Registro y categorizaci√≥n de ingresos, egresos y ahorros.
- Dashboard visual con gr√°ficos personalizados y comparativos.
- Sistema de configuraci√≥n flexible para metas, categor√≠as y fechas.
- ¬°Todo conectado a una base de datos real!

üöÄ Plus: Este proyecto marca el inicio de mi camino serio con **TDD**. 
A partir de ahora, *los tests ser√°n mi religi√≥n* üôè.

`,
        technologies: [
            'React',
            'Tailwind CSS',
            'Express',
            'Node.js',
            'TypeScript',
            'PostgreSQL',
        ],
        screenshots: []
    }


];